package taylor;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Shreyas
 */
public class Window extends JFrame {
    
    private Calculator calc;
    
    /**
     * Creates new form Window
     */
    public Window() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException e) {
            System.out.println("Error loading look and feel: " + e);
        } catch (InstantiationException e) {
            System.out.println("Error loading look and feel: " + e);
        } catch (IllegalAccessException e) {
            System.out.println("Error loading look and feel: " + e);
        } catch (UnsupportedLookAndFeelException e) {
            System.out.println("Error loading look and feel: " + e);
        }
        
        calc = new Calculator();
        initComponents();
        
        fieldPoint.getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { fieldPointEvent(); }
            @Override public void removeUpdate(DocumentEvent e) { fieldPointEvent(); }
            @Override public void changedUpdate(DocumentEvent e) { fieldPointEvent(); }
        });
        Action action = new AbstractAction("help") {
            @Override
            public void actionPerformed(ActionEvent e) {
                displayHelp();
            }
        };
        KeyStroke keyStroke = KeyStroke.getKeyStroke("F1");
        buttonHelp.getActionMap().put("help",action);
        buttonHelp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke,"help");
    }
    
    public void fieldPointEvent() {
        try {
            double d = Double.parseDouble(fieldPoint.getText());
            calc.point = d;
            repaint();
        } catch (NumberFormatException e) { }
    }
    
    @Override
    public void paint(Graphics graphics) {
        super.paint(graphics);
        calc.render(panelGraph.getGraphics(),panelGraph.getWidth(),panelGraph.getHeight());
        calc.update(tableValues);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGraph = new javax.swing.JPanel();
        buttonGraph = new javax.swing.JButton();
        sliderDegree = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableValues = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        boxAxis = new javax.swing.JCheckBox();
        boxShow = new javax.swing.JCheckBox();
        boxCoords = new javax.swing.JCheckBox();
        fieldEquation = new javax.swing.JFormattedTextField();
        fieldPoint = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelGraph.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panelGraphMouseWheelMoved(evt);
            }
        });
        panelGraph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelGraphMousePressed(evt);
            }
        });
        panelGraph.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelGraphMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
        panelGraph.setLayout(panelGraphLayout);
        panelGraphLayout.setHorizontalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelGraphLayout.setVerticalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );

        buttonGraph.setText("Graph");
        buttonGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGraphActionPerformed(evt);
            }
        });

        sliderDegree.setMajorTickSpacing(2);
        sliderDegree.setMaximum(10);
        sliderDegree.setMinorTickSpacing(1);
        sliderDegree.setPaintLabels(true);
        sliderDegree.setPaintTicks(true);
        sliderDegree.setSnapToTicks(true);
        sliderDegree.setValue(1);
        sliderDegree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderDegreeMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderDegreeMouseReleased(evt);
            }
        });
        sliderDegree.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sliderDegreePropertyChange(evt);
            }
        });

        tableValues.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "x", "f(x)", "Tn(x)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableValues);

        jLabel1.setText("Degree:");

        boxAxis.setSelected(true);
        boxAxis.setText("Axis");
        boxAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxAxisActionPerformed(evt);
            }
        });

        boxShow.setSelected(true);
        boxShow.setText("Show All");
        boxShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxShowActionPerformed(evt);
            }
        });

        boxCoords.setSelected(true);
        boxCoords.setText("Coordinates");
        boxCoords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxCoordsActionPerformed(evt);
            }
        });

        fieldEquation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldEquationActionPerformed(evt);
            }
        });

        fieldPoint.setText("0");

        jLabel2.setText("Point:");

        buttonHelp.setText("Help");
        buttonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addComponent(panelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(boxAxis)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxCoords)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(boxShow))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonGraph)
                                    .addComponent(fieldEquation, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sliderDegree, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))
                                .addGap(0, 5, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonHelp))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldEquation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonGraph)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sliderDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(boxShow)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(boxAxis)
                                        .addComponent(boxCoords)
                                        .addComponent(jLabel2)
                                        .addComponent(fieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel1)))
                    .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonHelp))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void submitEquation() {
        String s = fieldEquation.getText();
        if ("".equals(s))
            return;
        calc.setEquation(s);
        repaint();
    }
    
    private void buttonGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGraphActionPerformed
        submitEquation();
    }//GEN-LAST:event_buttonGraphActionPerformed

    private void boxAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxAxisActionPerformed
        calc.axis = boxAxis.isSelected();
        repaint();
    }//GEN-LAST:event_boxAxisActionPerformed
    private void boxShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxShowActionPerformed
        calc.show = boxShow.isSelected();
        repaint();
    }//GEN-LAST:event_boxShowActionPerformed
    private void boxCoordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCoordsActionPerformed
        calc.coords = boxCoords.isSelected();
        repaint();
    }//GEN-LAST:event_boxCoordsActionPerformed

    private void sliderDegreePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sliderDegreePropertyChange
        if (calc.degree == sliderDegree.getValue())
            return;
        calc.degree = sliderDegree.getValue();
        repaint();
    }//GEN-LAST:event_sliderDegreePropertyChange
    
    private int mx;
    private int my;
    private boolean h = false;
    
    private void panelGraphMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panelGraphMouseWheelMoved
        calc.zoom(evt.getWheelRotation());
        repaint();
        calc.update(tableValues);
    }//GEN-LAST:event_panelGraphMouseWheelMoved

    private void panelGraphMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelGraphMouseDragged
        calc.pan(mx-evt.getX(),my-evt.getY());
        mx = evt.getX();
        my = evt.getY();
        repaint();
        calc.update(tableValues);
    }//GEN-LAST:event_panelGraphMouseDragged

    private void panelGraphMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelGraphMousePressed
        mx = evt.getX();
        my = evt.getY();
    }//GEN-LAST:event_panelGraphMousePressed

    private void sliderDegreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderDegreeMouseClicked
        if (calc.degree == sliderDegree.getValue())
            return;
        calc.degree = sliderDegree.getValue();
        repaint();
    }//GEN-LAST:event_sliderDegreeMouseClicked

    private void sliderDegreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderDegreeMouseReleased
        if (calc.degree == sliderDegree.getValue())
            return;
        calc.degree = sliderDegree.getValue();
        repaint();
    }//GEN-LAST:event_sliderDegreeMouseReleased

    private void fieldEquationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldEquationActionPerformed
        submitEquation();
    }//GEN-LAST:event_fieldEquationActionPerformed

    private void buttonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHelpActionPerformed
        displayHelp();
    }//GEN-LAST:event_buttonHelpActionPerformed
    
    public void displayHelp() {
        JOptionPane.showMessageDialog(this,"Enter an equation to graph in the box.\n"
                + "Click 'Graph' or press enter to graph.\n"
                + "Use the slider to choose the degree of the polynomial.\n"
                + "Enter the point to estimate at.\n"
                + "The 'Show All' button toggles between graphing all series\n"
                + "    and graphing only the highest degree series.\n"
                + "Drag and scroll to modify the viewport on the graph.\n","Help",JOptionPane.PLAIN_MESSAGE);
    }
    
    public void setField(double d) {
        fieldPoint.setText(Double.toString(d));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxAxis;
    private javax.swing.JCheckBox boxCoords;
    private javax.swing.JCheckBox boxShow;
    private javax.swing.JButton buttonGraph;
    private javax.swing.JButton buttonHelp;
    private javax.swing.JFormattedTextField fieldEquation;
    private javax.swing.JTextField fieldPoint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelGraph;
    private javax.swing.JSlider sliderDegree;
    private javax.swing.JTable tableValues;
    // End of variables declaration//GEN-END:variables
}
